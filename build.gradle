buildscript {
    ext {
        springBootVersion = '3.0.5'
        restdocsApiSpecVersion = '0.17.1'
        swaggerGeneratorVersion = '2.19.2'
    }
    dependencies { // gradle 스크립트 작성시 필요한 라이브러리 ( task 등 )
        classpath "com.epages:restdocs-api-spec-gradle-plugin:${restdocsApiSpecVersion}"
        classpath "gradle.plugin.org.hidetake:gradle-swagger-generator-plugin:${swaggerGeneratorVersion}"
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version '1.1.0'
    id 'com.epages.restdocs-api-spec' version "${restdocsApiSpecVersion}"
    id "org.hidetake.swagger.generator" version "${swaggerGeneratorVersion}"
}

group = 'com.tensing'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = "17"
targetCompatibility = "17"

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

bootJar {
    // build 사용
    // dependsOn('copySwaggerUI')
}

dependencies {

    // spring boot web dependency
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // spring validation dependency
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // spring security dependency
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // spring cache dependency
    implementation 'org.springframework.boot:spring-boot-starter-cache'

    // websocket dependency
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    // jpa dependency
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // redis dependency
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // spring data elasticsearch dependency
    implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch'

    // yaml 자동완성 및 변수 매칭 기능, spring assistant plugin install 및 설정 필요 할수도 in idea
    implementation 'org.springframework.boot:spring-boot-configuration-processor'

    // logstash 전용 log 파일 생성을 위한 라이브러리
    implementation 'net.logstash.logback:logstash-logback-encoder:7.3'

    // jwt dependency
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // kafka dependency
    implementation 'org.springframework.kafka:spring-kafka'

    // mariadb dependency
    implementation 'org.mariadb.jdbc:mariadb-java-client:3.1.2'

    // Querydsl dependencies - querydsl-apt : compile 시 @Entity 찾아 QClass 을 생성해 주는 라이브러리, compileJava 실행해서 생성
    // 생겨난 QClass 의 java 버전 설정을 ide 에서 따로 잡아줘야하는 경우도 있는듯 하다...(현재 사용 17버전 사용으로 하여야 ide 에서 javax를 찾음)
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    swaggerUI 'org.webjars:swagger-ui:4.15.5'

    // mapstruct dependencies - lombok 보다 위에 있어야 builder 사용
    implementation 'org.mapstruct:mapstruct:1.5.3.Final'
    implementation 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0' // lombok v1.18.16+ 부터
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'

    // lombok dependencies
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    // spring test dependency
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }

    // jupiter dependency
    testImplementation("org.junit.jupiter:junit-jupiter-engine")

    // test containers dependency
    testImplementation("org.testcontainers:junit-jupiter")

    // spring security test
    testImplementation 'org.springframework.security:spring-security-test'

    // doc dependency , epages 0.16 버전은 spring-restdocs-mockmvc 기본 내장인데, 0.17 은 포함을 안하고 있다... ( boot 3은 1.7 버전 사용 )
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation "com.epages:restdocs-api-spec-mockmvc:${restdocsApiSpecVersion}"

    // test database dependency
    testImplementation 'com.h2database:h2:2.1.214'

    // test redis dependency
    testImplementation('it.ozimov:embedded-redis:0.7.3') { exclude group: "org.slf4j", module: "slf4j-simple" }

    // test kafka dependency
    testImplementation 'org.springframework.kafka:spring-kafka-test:3.0.5'

}

dependencyManagement {
    imports {
        mavenBom("org.testcontainers:testcontainers-bom:1.17.6")
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

openapi3 {
    // "$buildDir/resources/main/static/swagger-ui" 해당 경로에 openapi3.yaml 만들어짐 ( 어디서 만들고 있는지 확인 필요 )
    // ${project.buildDir}/api-spec/openapi3.yaml 경로에 만들어짐
    setServer("http://localhost")
    title = "restdocs-swagger API Documentation"
    description = "Spring REST Docs with SwaggerUI."
    version = "0.0.1"
    format = "yaml"
}

swaggerSources {
    main{
        // 스웨거 ui 에 사용 될 oas yaml 위치 지정
        setInputFile(file("${project.buildDir}/api-spec/openapi3.yaml"))
    }
}

// 스웨거 ui 생성 전 oas yml 생성하도록 설정
tasks.withType(GenerateSwaggerUI) {
    dependsOn 'openapi3'
}

// 생성된 SwaggerUI 를 jar 에 포함시키기 위해 build/resources 경로로 로 복사
tasks.register('copySwaggerUI', Copy) {

    // 스웨거 ui 생성 ( html 파일 등 )
    dependsOn 'generateSwaggerUIMain'

    // 웹으로 접근 가능하도록 리소스 static 파일 위치로 복사 ( outputDir 읽어 오도록 확인 필요 임시로 아래 로직 사용 )
    //def generateSwaggerUIMainTask = tasks.named('generateSwaggerUIMain', GenerateSwaggerUI).get()
    //from("${generateSwaggerUIMainTask.outputDir}")

    // 웹으로 접근 가능하도록 리소스 static 파일 위치로 복사
    from("$buildDir/swagger-ui-main")
    into("$buildDir/resources/main/static/swagger-ui")
}



