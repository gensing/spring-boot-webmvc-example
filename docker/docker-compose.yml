version: '2'
services:
  mariadb:
    image: mariadb:10
    container_name: mariadb
    restart: always
    ports:
      - "3306:3306"
    volumes:
      - ./mariadb/conf.d:/etc/mysql/conf.d
      - ./mariadb/initdb.d:/docker-entrypoint-initdb.d
      - ./../docker-data/mariadb/data:/var/lib/mysql
    environment:
      TZ: Asia/Seoul
      MYSQL_ROOT_PASSWORD: 1234
      MYSQL_DATABASE: boot
      MYSQL_USER: boot
      MYSQL_PASSWORD: boot
    networks:
      - es-bridge
  redis:
    image: redis:alpine
    container_name: redis
    command: redis-server --port 6379
    ports:
      - "6379:6379"
  elasticsearch:
    build:
      context: ./elasticsearch/
      dockerfile: Dockerfile
      args:
        ELK_VERSION: 7.15.2
    container_name: elasticsearch
    environment:
      - node.name=single-node
      - cluster.name=boot
      - discovery.type=single-node
      - action.auto_create_index=true # 운영 환경에서는 스키마리스 사용 X ( 직접 생성 )
      - path.data=/usr/share/elasticsearch/data
      - path.logs=/usr/share/elasticsearch/logs
      - http.port=9200
      - transport.port=9300
      - transport.compress=true
      - network.host=0.0.0.0
      - http.cors.enabled=false
      - http.cors.allow-origin=/https?:\/\/localhost(:[0-9]+)?/
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      #- ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - ./elasticsearch/config/dic:/usr/share/elasticsearch/config/dic
      - ./../docker-data/elasticsearch/data:/usr/share/elasticsearch/data
      - ./../docker-data/elasticsearch/log:/usr/share/elasticsearch/log
    networks:
      - es-bridge
  logstash:
    build:
      context: ./logstash/
      dockerfile: Dockerfile
      args:
        ELK_VERSION: 7.15.2
    container_name: logstash
    environment:
      SERVER_NAME: logstash
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    volumes:
      - ./logstash/config/pipeline.yml:/usr/share/logstash/config/pipeline.yml
      - ./logstash/pipeline:/usr/share/logstash/pipeline
      - ./logstash/jars:/usr/share/logstash/jars
      - ./logstash/dat:/usr/share/logstash/dat
    ports:
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    networks:
      - es-bridge
    depends_on:
      - elasticsearch
  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.15.2
    environment:
      SERVER_NAME: kibana
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - es-bridge
    depends_on:
      - elasticsearch
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - "21812:2181"
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 21812
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_HOST_NAME: 127.0.0.1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:21812
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true # 실제 환경에서는 사용하지 말고, 직접 생성하시오?
    volumes:
      - ./../docker-data/kafka/data:/var/lib/kafka/data
    depends_on:
      - zookeeper
  kurento: # webrtc 사용을 위한 turn/sturn 서버
    image: kurento/kurento-media-server:latest
    container_name: kurento
    ports:
      - "8888:8888/tcp"
      - "5001-5050:5001-5050/udp"
    environment:
      KMS_MIN_PORT: 5001
      KMS_MAX_PORT: 5050
  nginx-rtmp: # hls 를 위한 미디어 서버
    image: alfg/nginx-rtmp
    container_name: nginx-rtmp
    ports:
      - 1935:1935
      - 8080:80
    environment:
      - HTTP_PORT=80
      - RTMP_PORT=1935

networks:
  es-bridge:
    driver: bridge